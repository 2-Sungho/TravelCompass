<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="reviewMapper">
	<!-- Review resultMap -->
	<resultMap type="Review" id="review_rm">
		<id property="reviewNo" column="REVIEW_NO"/>
		<result property="rating" column="RATING"/>
		<result property="reviewTitle" column="REVIEW_TITLE"/>
		<result property="reviewContent" column="REVIEW_CONTENT"/>
		<result property="reviewDate" column="REVIEW_DATE"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="contentid" column="CONTENT_ID"/>
		<result property="firstimage" column="FIRST_IMAGE"/>
		<result property="reviewImagePath" column="REVIEW_IMAGE_PATH"/>
		<result property="profileImage" column="PROFILE_IMAGE"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		
		<result property="contenttypeid" column="CONTENT_TYPE_ID"/>

		
		 
		<collection property="reviewImgList" javaType="java.util.ArrayList"
		ofType="ReviewImage" select="selectReviewImageList" column="REVIEW_NO"/>
	</resultMap>
	
	<!--reviewImgae resultMap-->
	<resultMap type="ReviewImage" id="reviewImage_rm">
		<id property="reviewImageNo" column="REVIEW_IMAGE_NO"/>
		<result property="reviewNo" column="REVIEW_NO"/>
		<result property="reviewImagePath" column="REVIEW_IMAGE_PATH"/>
		<result property="reviewImageOrder" column="REVIEW_IMAGE_ORDER"/>
		<result property="reviewImageReName" column="REVIEW_IMAGE_RENAME"/>
		<result property="reviewImageOriginal" column="REVIEW_IMAGE_ORIGINAL"/>
	</resultMap>
	
	<!-- 처음 작성된 리뷰수 조회 -->
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*) FROM REVIEW
		WHERE CONTENT_ID=#{contentid}
		AND REVIEW_FL='N'
	</select>
	
	<!-- 정렬 후 조회된 리뷰 수 조회 -->
	<select id="getListCount_order">
		SELECT COUNT(*) FROM REVIEW
		WHERE CONTENT_ID=#{contentid}
		AND REVIEW_FL='N'
		<if test=''>
			<choose>
				<!-- a1= 좋아요 추천 내림차순 -->
				<when test="key==a1">
					ORDER BY REVIEW_LIKE DESC
				</when>
				<!-- a2= 좋아요 추천 오름차순 -->
				<when test="key==a2">
					ORDER BY REVIEW_LIKE ASC				
				</when>
				<!-- b1= 평점 내림차순 -->
				<when test="">
					ORDER BY RATING DESC
				</when>
				<!-- b2= 평점 오름차순 -->
				<when test="">
					ORDER BY RATING ASC
				</when>
				<!-- 날짜 최신순 내림차순 -->
				<when test="">
					ORDER BY REVIEW_DATE DESC
				</when>
				<!-- 날짜 최신순 오름차순 -->
				<when test="">
					ORDER BY REVIEW_DATE ASC
				</when>
				
			</choose>
		
		</if>
	</select>
	
	
	
	<!-- 처음 리뷰목록 조회 -->
	<select id="selectReviewList" resultMap="review_rm">
		SELECT REVIEW_NO, REVIEW_TITLE, REVIEW_CONTENT,
		 <![CDATA[
			CASE
				WHEN SYSDATE - REVIEW_DATE < 1/24/60
				THEN FLOOR( (SYSDATE - REVIEW_DATE) * 24 * 60 * 60 ) || '초 전'
				WHEN SYSDATE - REVIEW_DATE < 1/24
				THEN FLOOR( (SYSDATE - REVIEW_DATE) * 24 * 60) || '분 전'
				WHEN SYSDATE - REVIEW_DATE < 1
				THEN FLOOR( (SYSDATE - REVIEW_DATE) * 24) || '시간 전'
				ELSE TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD')
			END REVIEW_DATE,
			]]> 
			PROFILE_IMAGE, MEMBER_NICKNAME, MEMBER_NO, RATING,
			(SELECT COUNT(*) FROM REVIEW_LIKE WHERE REVIEW_NO=R.REVIEW_NO) REVIEW_LIKE
		FROM REVIEW R
		LEFT JOIN "MEMBER" USING(MEMBER_NO)
		WHERE REVIEW_FL = 'N'
		AND CONTENT_ID = #{contentid}
		ORDER BY REVIEW_NO DESC
	</select>
	
	<!-- 리뷰 목록 정렬 -->
	<select id="orderReviewList" resultMap="review_rm">
		SELECT REVIEW_TITLE, REVIEW_CONTENT,
		 <![CDATA[
			CASE
				WHEN SYSDATE - REVIEW_DATE < 1/24/60
				THEN FLOOR( (SYSDATE - REVIEW_DATE) * 24 * 60 * 60 ) || '초 전'
				WHEN SYSDATE - REVIEW_DATE < 1/24
				THEN FLOOR( (SYSDATE - REVIEW_DATE) * 24 * 60) || '분 전'
				WHEN SYSDATE - REVIEW_DATE < 1
				THEN FLOOR( (SYSDATE - REVIEW_DATE) * 24) || '시간 전'
				ELSE TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD')
			END REVIEW_DATE,
			]]> 
			PROFILE_IMAGE, MEMBER_NICKNAME, MEMBER_NO, RATING,
			(SELECT COUNT(*) FROM REVIEW LIKE WHERE REVIEW_NO=#{reviewNo}) REVIEW_LIKE
		FROM REVIEW
		LEFT JOIN "MEMBER" USING(MEMBER_NO)
		WHERE REVIEW_FL = 'N'
		AND CONTENT_ID = #{contentid}
		<if test=''>
			<choose>
				<!-- a1= 좋아요 추천 내림차순 -->
				<when test="key==a1">
					ORDER BY REVIEW_LIKE DESC
				</when>
				<!-- a2= 좋아요 추천 오름차순 -->
				<when test="key==a2">
					ORDER BY REVIEW_LIKE ASC				
				</when>
				<!-- b1= 평점 내림차순 -->
				<when test="">
					ORDER BY RATING DESC
				</when>
				<!-- b2= 평점 오름차순 -->
				<when test="">
					ORDER BY RATING ASC
				</when>
				<!-- 날짜 최신순 내림차순 -->
				<when test="">
					ORDER BY REVIEW_DATE DESC
				</when>
				<!-- 날짜 최신순 오름차순 -->
				<when test="">
					ORDER BY REVIEW_DATE ASC
				</when>
				
			</choose>
		
		</if>
	</select>
	
	<!-- 특정 리뷰의 이미지 목록 조회 -->
	<select id="selectReviewImageList" resultMap="reviewImage_rm">
		SELECT * FROM REVIEW_IMAGE
		WHERE REVIEW_NO = #{reviewNo}
		ORDER BY REVIEW_IMAGE_NO
	</select>
	
	<!-- 리뷰 등록 -->
	<insert id="insertReview" parameterType="Review" useGeneratedKeys="true">
		<selectKey keyProperty="reviewNo" resultType="_int" order="BEFORE">
			SELECT SEQ_REVIEW_NO.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO REVIEW
		VALUES (#{reviewNo},#{rating},#{reviewTitle},#{reviewContent},DEFAULT,#{memberNo},#{contentid},#{firstimage},DEFAULT,#{contenttypeid})
	</insert>
	
	<!-- 리뷰 삭제 -->
	<update id="deleteReview">
		UPDATE "REVIEW" SET
		REVIEW_FL='Y'
		WHERE REVIEW_NO=#{reviewNo}
	</update>
	
	
	<!-- 평균 평점 조회 -->
	<select id="selectAvgRating" resultType="_double">
		SELECT NVL(ROUND(AVG(RATING),1),0)
		FROM REVIEW
		WHERE CONTENT_ID = #{contentid}
	</select>
	
	<!-- 작성된 리뷰 개수 조회 -->
	<select id="selectReviewCount" resultType="_int">
		SELECT COUNT(CONTENT_ID)
		FROM REVIEW
		WHERE CONTENT_ID = #{contentid}
	</select>
	
	<!-- 리뷰 수정 -->
	<!-- <update id="updateReview">
		UPDATE "REVIEW" SET
		WHERE REVIEW_TITLE=
		AND REVIEW_CONTENT=
	</update> -->
	
	<!-- 평점 개수 조회 -->
	<select id="countRating" resultType="string">
		SELECT COUNT(*) COUNT_RATING FROM REVIEW WHERE CONTENT_ID = #{contentid} AND RATING = 1
		UNION ALL
		SELECT COUNT(*) FROM REVIEW WHERE CONTENT_ID = #{contentid} AND RATING = 2
		UNION ALL
		SELECT COUNT(*) FROM REVIEW WHERE CONTENT_ID = #{contentid} AND RATING = 3
		UNION ALL
		SELECT COUNT(*) FROM REVIEW WHERE CONTENT_ID = #{contentid} AND RATING = 4
		UNION ALL
		SELECT COUNT(*) FROM REVIEW WHERE CONTENT_ID = #{contentid} AND RATING = 5
	</select>
	
	
	
	<!-- 장소와 연결할 리뷰 평균 평점, 리뷰 갯수 조회 -->
	<select id="selectConnectReview" parameterType="list" resultType="map">
		SELECT COUNT(REVIEW_NO) REVIEW_COUNT, NVL(ROUND(AVG(RATING), 1), 0) AVERAGE_RATING FROM REVIEW
		RIGHT JOIN (SELECT * FROM
			<foreach collection="list" item="contentid" open="(" close=")" separator="UNION ALL">
				SELECT #{contentid} CONTENT_ID FROM DUAL
			</foreach>
		) A
		USING(CONTENT_ID)
		GROUP BY CONTENT_ID
		ORDER BY CONTENT_ID
	</select>
</mapper>
